Transform: "AWS::Serverless-2016-10-31"
Metadata:
  AWS::ServerlessRepo::Application:
    Name: serverless-iiif
    Description: IIIF Image API 2.1 server in an AWS Serverless Application
    Author: Samvera
    SpdxLicenseId: Apache-2.0
    LicenseUrl: LICENSE.txt
    ReadmeUrl: README.md
    Labels: ["iiif", "image-processing"]
    HomePageUrl: https://github.com/samvera-labs/serverless-iiif
    SemanticVersion: 3.1.2
    SourceCodeUrl: https://github.com/samvera-labs/serverless-iiif
Parameters:
  CorsAllowCredentials:
    Type: String
    Description: >
      Value of the CORS `Access-Control-Allow-Credentials` response header.
      Must be `true` to allow requests with `Authorization` and/or
      `Cookie` headers.
    AllowedValues:
      - false
      - true
    Default: false
  CorsAllowHeaders:
    Type: String
    Description: Value of the CORS `Access-Control-Allow-Headers` response header
    Default: "*"
  CorsAllowOrigin:
    Type: String
    Description: >
      Value of the CORS `Access-Control-Allow-Origin` response header.
      Use the special value `REFLECT_ORIGIN` to copy the value from the
      `Origin` request header (required to emulate `*` for XHR requests
      using `Authorization` and/or `Cookie` headers).
    Default: "*"
  CorsExposeHeaders:
    Type: String
    Description: Value of the CORS `Access-Control-Expose-Headers` response header
    Default: cache-control,content-language,content-length,content-type,date,expires,last-modified,pragma
  CorsMaxAge:
    Type: Number
    Description: Value of the CORS `Access-Control-MaxAge` response header
    Default: 3600
  ForceHost:
    Type: String
    Description: Forced hostname to use in responses
    Default: ""
  IiifLambdaMemory:
    Type: Number
    Description: The memory provisioned for the lambda.
    MinValue: 128
    MaxValue: 10240
    Default: 3008
  PixelDensity:
    Type: Number
    Description: Hardcoded DPI/Pixel Density/Resolution to encode in output images
    Default: 0
    MinValue: 0
  Preflight:
    Type: String
    Description: Indicates whether the function should expect preflight headers
    AllowedValues:
      - false
      - true
    Default: false
  PyramidLimit:
    Type: Number
    Description: Smallest pyramid image dimension. Set to `0` to prevent server from auto-calculating pyramid page sizes.
    MinValue: 0
    Default: 256
  ResolverTemplate:
    Type: String
    Description: A printf-style format string that determines the location of source image within the bucket given the image ID
    Default: "%s.tif"
  SharpLayer:
    Type: String
    Description: >
      ARN of a custom AWS Lambda Layer containing the sharp and libvips dependencies. Use the special value `JP2` 
      to use the managed JPEG2000-compatible layer, or `INTERNAL` to use the built-in dependencies (without JPEG2000
      support).
    AllowedPattern: "^INTERNAL$|^JP2$|^arn:aws:lambda:.*:.*:layer:.+:\\d+$"
    Default: "JP2"
  UseCacheBucket:
    Type: String
    Description: Use an S3 Bucket to store responses > 6MB
    AllowedValues:
      - "true"
      - "false"
    Default: "true"
  UseCloudFront:
    Type: String
    Description: Use a CloudFront distribution for caching and returning responses > 6MB (required if UseCacheBucket = true)
    AllowedValues:
      - "true"
      - "false"
    Default: "true"
  CacheMinimumTTL:
    Type: Number
    Description: Minimum TTL (in seconds) for the CloudFront Cache
    Default: 31536000
  CacheMaximumTTL:
    Type: Number
    Description: Maximum TTL (in seconds) for the CloudFront Cache
    Default: 31536000
  CacheDefaultTTL:
    Type: Number
    Description: Default TTL (in seconds) for the CloudFront Cache
    Default: 31536000
  CachePriceClass:
    Type: String
    Description: Price Class for the CloudFront Cache
    Default: PriceClass_100
    AllowedValues:
      - PriceClass_100
      - PriceClass_200
      - PriceClass_All
  CacheDomainName:
    Type: String
    Description: Custom Domain Name for the API Gateway Endpoint or CloudFront Cache
    Default: ""
  CacheSSLCertificate:
    Type: String
    Description: ARN of the ACM SSL Certification to use for the API Gateway Endpoint or CloudFront Cache
    Default: ""
  SourceBucket:
    Type: String
    Description: Name of bucket containing source images
  StageName:
    Type: String
    Description: Name of the API stage to be deployed
    Default: latest
  IiifLambdaTimeout:
    Type: Number
    Description: The timeout for the lambda.
    Default: 30
  OriginRequestARN:
    Type: String
    Description: ARN of the Lambda@Edge Function to use at the origin-request stage
    Default: ""
  OriginResponseARN:
    Type: String
    Description: ARN of the Lambda@Edge Function to use at the origin-response stage
    Default: ""
  ViewerRequestARN:
    Type: String
    Description: ARN of the CloudFront or Lambda@Edge Function to use at the viewer-request stage
    Default: ""
  ViewerRequestType:
    Type: String
    Description: Type of viewer-request Function to use (CloudWatch Function or Lambda@Edge)
    Default: "None"
    AllowedValues:
      - CloudWatch Function
      - Lambda@Edge
      - None
  ViewerResponseARN:
    Type: String
    Description: ARN of the CloudFront or Lambda@Edge Function to use at the viewer-response stage
    Default: ""
  ViewerResponseType:
    Type: String
    Description: Type of viewer-response Function to use (CloudWatch Function or Lambda@Edge)
    Default: "None"
    AllowedValues:
      - CloudWatch Function
      - Lambda@Edge
      - None
Conditions:
  CreateCacheBucket: 
    Fn::Equals: [!Ref UseCacheBucket, "true"]
  CreateDistribution: 
    Fn::Or:
      - Fn::Equals: [!Ref UseCloudFront, "true"]
      - Fn::Equals: [!Ref UseCacheBucket, "true"]
      - Fn::Not:
          - Fn::Equals: [!Ref ViewerRequestARN, ""]
  CreateCacheBucketAndDistribution:
    Fn::And:
      - Condition: CreateCacheBucket
      - Condition: CreateDistribution
  DistributionCustomDomain:
    Fn::And:
      - Condition: CreateDistribution
      - Fn::Not:
          - Fn::Equals: [!Ref CacheDomainName, ""]
  UseOriginRequest:
    Fn::Not:
      - Fn::Equals: [!Ref OriginRequestARN, ""]
  UseOriginResponse:
    Fn::Not:
      - Fn::Equals: [!Ref OriginResponseARN, ""]
  UseViewerRequest:
    Fn::And:
      - Fn::Not:
          - Fn::Equals: [!Ref ViewerRequestType, "None"]
      - Fn::Not:
          - Fn::Equals: [!Ref ViewerRequestARN, ""]
  UseViewerResponse:
    Fn::And:
      - Fn::Not:
          - Fn::Equals: [!Ref ViewerResponseType, "None"]
      - Fn::Not:
          - Fn::Equals: [!Ref ViewerResponseARN, ""]
  ViewerRequestCloudWatchFunction:
    Fn::And:
      - Condition: UseViewerRequest
      - Fn::Equals: [!Ref ViewerRequestType, "CloudWatch Function"]
  ViewerRequestLambda:
    Fn::And:
      - Condition: UseViewerRequest
      - Fn::Equals: [!Ref ViewerRequestType, "Lambda@Edge"]
  ViewerResponseCloudWatchFunction:
    Fn::And:
      - Condition: UseViewerResponse
      - Fn::Equals: [!Ref ViewerResponseType, "CloudWatch Function"]
  ViewerResponseLambda:
    Fn::And:
      - Condition: UseViewerResponse
      - Fn::Equals: [!Ref ViewerResponseType, "Lambda@Edge"]
  UsePixelDensity:
    Fn::Not:
      - Fn::Equals: [!Ref PixelDensity, 0]
Resources:
  Dependencies:
    Type: "AWS::Serverless::LayerVersion"
    Properties:
      LayerName:
        Fn::Sub: "${AWS::StackName}-dependencies"
      Description: Dependencies for IIIF app
      ContentUri: ./dependencies
      CompatibleRuntimes:
        - nodejs22.x
      LicenseInfo: "Apache-2.0"
    Metadata:
      BuildMethod: nodejs22.x
  LambdaEdgeFunctionForwardedFor:
      Type: AWS::Serverless::Function
      Properties:
        CodeUri: ./src_edge
        Role: !GetAtt LambdaEdgeFunctionRole.Arn
        Runtime: nodejs22.x
        Handler: index.viewerRequest
        Timeout: 5
        AutoPublishAlias: live 
  LambdaEdgeFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
        Path: "/"
        ManagedPolicyArns:
            - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Sid: "AllowLambdaServiceToAssumeRole"
              Effect: "Allow"
              Action: 
                - "sts:AssumeRole"
              Principal:
                Service: 
                  - "lambda.amazonaws.com"
                  - "edgelambda.amazonaws.com"
  IiifCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref CacheDomainName
      ValidationMethod: 'DNS'
  CacheBucket:
    Type: "AWS::S3::Bucket"
    Condition: CreateCacheBucket
    Properties:
      BucketName: 
        Fn::Sub: "${AWS::StackName}-cache"
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            ExpirationInDays: 1
            ObjectSizeGreaterThan: 4000000
  CacheBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Condition: CreateCacheBucketAndDistribution
    Properties:
      Bucket: !Ref CacheBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource:
              - Fn::Sub: "arn:aws:s3:::${CacheBucket}/*"
            Principal:
              CanonicalUser:
                Fn::GetAtt: CachingIdentity.S3CanonicalUserId

  IiifFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Runtime: nodejs22.x
      Handler: index.handler
      MemorySize: !Ref IiifLambdaMemory
      FunctionUrlConfig:
        AuthType: NONE
        InvokeMode: RESPONSE_STREAM
      Timeout:
        Ref: IiifLambdaTimeout
      CodeUri: ./src
      Layers:
        - Ref: Dependencies
        - 'arn:aws:lambda:us-east-1:464622532012:layer:Datadog-Node22-x:117'
      Policies:
        - AWSLambdaExecute
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - s3:ListBucket
                - s3:GetBucketLocation
              Resource:
                - Fn::Sub: "arn:aws:s3:::${SourceBucket}"
                - Fn::Sub: "arn:aws:s3:::${CacheBucket}"
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectACL
              Resource:
                - Fn::Sub: "arn:aws:s3:::${SourceBucket}/*"
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
                - s3:DeleteObject
              Resource:
                - Fn::Sub: "arn:aws:s3:::${CacheBucket}/*"
            - Effect: Allow
              Action:
                - s3:ListAllMyBuckets
              Resource: "*"
      Environment:
        Variables:
          corsAllowCredentials: !Ref CorsAllowCredentials
          corsAllowOrigin: !Ref CorsAllowOrigin
          corsAllowHeaders: !Ref CorsAllowHeaders
          corsExposeHeaders: !Ref CorsExposeHeaders
          corsMaxAge: !Ref CorsMaxAge
          cacheBucket:
            Fn::If: 
              - CreateCacheBucket
              - Fn::Sub: "${AWS::StackName}-cache"
              - !Ref AWS::NoValue
          density:
            Fn::If:
              - UsePixelDensity
              - !Ref PixelDensity
              - !Ref AWS::NoValue
          forceHost:
            Fn::If:
              - DistributionCustomDomain
              - !Ref CacheDomainName
              - !Ref AWS::NoValue
          includeStage:
            Fn::If:
              - CreateDistribution
              - false
              - !Ref AWS::NoValue
          preflight:
            Fn::If:
              - UseViewerRequest
              - false
              - !Ref AWS::NoValue
          resolverTemplate: !Ref ResolverTemplate
          tiffBucket:
            Fn::Sub: "${SourceBucket}"
          DD_KMS_API_KEY: "AQICAHjNoNXrp3Thd1UL3np+Y/XCnSL7Qz4WnjX94YIt8xU8swEtnSpn/igd3vmQIASzwzbxAAAAdjB0BgkqhkiG9w0BBwagZzBlAgEAMGAGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQMRJdyqtfH+l/fCVhMAgEQgDOC6XkoNRyTuE/i4ICJWXqlWwowFpcU5IGyAlReULvVErzUfu1TM9MiaKYGo2vhSbGNjKI="
          DD_FLUSH_TO_LOG: True

  CachingIdentity:
    Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
    Condition: CreateDistribution
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: "Caching Distribution Identity"

  CloudFrontCachePolicy:
      Type: "AWS::CloudFront::CachePolicy"
      Properties:
          CachePolicyConfig:
              Name:
                Fn::Sub: "iiif-cloud-${StageName}-CachePolicy"
              Comment: "Cache policy for IIIF Cloud"
              DefaultTTL: !Ref CacheDefaultTTL
              MaxTTL: !Ref CacheMinimumTTL
              MinTTL: !Ref CacheMaximumTTL
              ParametersInCacheKeyAndForwardedToOrigin:
                  EnableAcceptEncodingGzip: true
                  EnableAcceptEncodingBrotli: true
                  CookiesConfig:
                      CookieBehavior: "none"
                  HeadersConfig:
                      HeaderBehavior: "none"
                  QueryStringsConfig:
                      QueryStringBehavior: "none"

  CloudFrontOriginRequestPolicy:
      Type: "AWS::CloudFront::OriginRequestPolicy"
      Properties:
          OriginRequestPolicyConfig:
              Name:
                Fn::Sub: "iiif-cloud-${StageName}-OriginPolicy"
              Comment: "Origin policy for IIIF Cloud"
              HeadersConfig:
                  HeaderBehavior: "whitelist"
                  Headers:
                    - "x-original-uri"
                    - "x-cache-iiif-request"
              CookiesConfig:
                  CookieBehavior: "none"
              QueryStringsConfig:
                  QueryStringBehavior: "none"

  CloudFrontResponseHeadersPolicy:
      Type: "AWS::CloudFront::ResponseHeadersPolicy"
      Properties:
          ResponseHeadersPolicyConfig:
              Comment: "Custom response policy with cache-control max-age set to match TTL"
              CorsConfig:
                  AccessControlAllowCredentials: false
                  AccessControlAllowHeaders:
                      Items:
                        - "*"
                  AccessControlAllowMethods:
                      Items:
                        - "ALL"
                  AccessControlAllowOrigins:
                      Items:
                        - "*"
                  AccessControlExposeHeaders:
                      Items:
                        - "*"
                  OriginOverride: true
              CustomHeadersConfig:
                  Items:
                    - Header: "Cache-Control"
                      Value: "max-age=31536000"
                      Override: true
              Name:
                Fn::Sub: "iiif-cloud-${StageName}-ResponseHeadersPolicy"

  CFDistribution:
    Type: "AWS::CloudFront::Distribution"
    Condition: CreateDistribution
    Properties:
      DistributionConfig:
        Enabled: true
        HttpVersion: 'http2'
        CustomErrorResponses:
          - ErrorCode: 502
            ErrorCachingMinTTL: 1
          - ErrorCode: 503
            ErrorCachingMinTTL: 1
        Aliases:
          Fn::If:
            - DistributionCustomDomain
            - - !Ref CacheDomainName
            - !Ref AWS::NoValue
        ViewerCertificate:
          Fn::If:
            - DistributionCustomDomain
            - AcmCertificateArn: !Ref IiifCertificate
              MinimumProtocolVersion: 'TLSv1'
              SslSupportMethod: 'sni-only'
            - CloudFrontDefaultCertificate: true
        Origins:
          - Id: IiifLambda
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
            DomainName: !Select [2, !Split ["/", !GetAtt IiifFunctionUrl.FunctionUrl]]
            # OriginPath:
            #   Fn::Sub: "/${IiifApi.Stage}"
            OriginShield:
              Enabled: true
              OriginShieldRegion:
                Fn::Sub: "${AWS::Region}"
          - Fn::If:
              - CreateCacheBucket
              - Id: IiifCache
                S3OriginConfig:
                  OriginAccessIdentity:
                    Fn::Join:
                      - ''
                      - - 'origin-access-identity/cloudfront/'
                        - !Ref CachingIdentity
                OriginShield:
                  Enabled: true
                  OriginShieldRegion:
                    Fn::Sub: "${AWS::Region}"
                DomainName:
                  Fn::Sub: "${CacheBucket}.s3.${AWS::Region}.amazonaws.com"
              - !Ref AWS::NoValue
        OriginGroups:
          Quantity: 
            Fn::If: [CreateCacheBucket, 1, 0]
          Items:
            Fn::If:
              - CreateCacheBucket
              - - Id: IiifOrigins
                  Members:
                    Quantity: 2
                    Items:
                      - OriginId: IiifLambda
                      - OriginId: IiifCache
                  FailoverCriteria:
                      StatusCodes:
                          Items: [404]
                          Quantity: 1
              - []
        DefaultCacheBehavior:
          TargetOriginId: 
            Fn::If: [CreateCacheBucket, IiifOrigins, IiifLambda]
          ViewerProtocolPolicy: https-only
          AllowedMethods: ["GET", "HEAD", "OPTIONS"]
          CachedMethods: ["GET", "HEAD", "OPTIONS"]
          Compress: false
          CachePolicyId: !Ref CloudFrontCachePolicy
          OriginRequestPolicyId: !Ref CloudFrontOriginRequestPolicy
          ResponseHeadersPolicyId: !Ref CloudFrontResponseHeadersPolicy
          FunctionAssociations:
            - Fn::If:
              - ViewerRequestCloudWatchFunction
              - EventType: viewer-request
                FunctionARN: !Ref ViewerRequestARN
              - !Ref AWS::NoValue
            - Fn::If:
              - ViewerResponseCloudWatchFunction
              - EventType: viewer-response
                FunctionARN: !Ref ViewerResponseARN
              - !Ref AWS::NoValue
          LambdaFunctionAssociations:
            - Fn::If:
              - ViewerRequestLambda
              - EventType: viewer-request
                LambdaFunctionARN: !Ref ViewerRequestARN
                IncludeBody: false
              - EventType: viewer-request
                LambdaFunctionARN: !Ref LambdaEdgeFunctionForwardedFor.Version
            - Fn::If:
              - UseOriginRequest
              - EventType: origin-request
                LambdaFunctionARN: !Ref OriginRequestARN
                IncludeBody: false
              - !Ref AWS::NoValue
            - Fn::If:
              - UseOriginResponse
              - EventType: origin-response
                LambdaFunctionARN: !Ref OriginResponseARN
                IncludeBody: false
              - !Ref AWS::NoValue
            - Fn::If:
              - ViewerResponseLambda
              - EventType: viewer-response
                LambdaFunctionARN: !Ref ViewerResponseARN
                IncludeBody: false
              - !Ref AWS::NoValue
Outputs:
  EndpointV2:
    Description: IIIF V2 Endpoint URL
    Value:
      Fn::If:
        - CreateDistribution
        - Fn::If:
          - DistributionCustomDomain
          - Fn::Sub: "https://${CacheDomainName}/iiif/2/"
          - Fn::Sub: "https://${CFDistribution.DomainName}/iiif/2/"
        - Fn::Sub: "${IiifFunctionUrl.FunctionUrl}iiif/2"
  EndpointV3:
    Description: IIIF V3 Endpoint URL
    Value:
      Fn::If:
        - CreateDistribution
        - Fn::If:
          - DistributionCustomDomain
          - Fn::Sub: "https://${CacheDomainName}/iiif/2/"
          - Fn::Sub: "https://${CFDistribution.DomainName}/iiif/2/"
        - Fn::Sub: "${IiifFunctionUrl.FunctionUrl}iiif/2"
  DistributionId:
    Description: Caching Distribution ID
    Value: 
      Fn::If:
        - CreateDistribution
        - !Ref CFDistribution
        - AWS::NoValue
    Export:
      Name: !Sub "${AWS::StackName}:DistributionId"
  LambdaFunction:
    Description: IIIF Lambda Function Name
    Value: !Ref IiifFunction
  FunctionDomain:
    Description: IIIF Function Domain Name
    Value:
      Fn::Select:
        - 2
        - Fn::Split:
          - "/"
          - Fn::GetAtt: IiifFunctionUrl.FunctionUrl
  FunctionUrl:
    Description: IIIF Function URL
    Value:
      Fn::GetAtt: IiifFunctionUrl.FunctionUrl
